#!/usr/bin/env python
# plot_increment
# cory.r.martin@noaa.gov
# 2020-04-01
# plot GSI global analysis increment
import matplotlib
matplotlib.use('Agg')
import argparse
import netCDF4 as nc
import matplotlib.pyplot as plt
import cartopy.crs as ccrs
import datetime as dt
from cartopy.mpl.gridliner import LONGITUDE_FORMATTER, LATITUDE_FORMATTER
import numpy as np


def gen_2d_plot(plotdata, lons, lats, figinfo, plotdir):
    fig = plt.figure(figsize=(11,6.5))
    plottot = figinfo['plotscale']
    plotmax = abs(max([figinfo['min'],figinfo['max']], key=abs))*plottot # decreasing for plotting only
    plotmin = -plotmax
    crs = ccrs.PlateCarree()
    ax = plt.axes(projection=crs)
    incplot = plt.pcolormesh(lons, lats, plotdata, vmin=plotmin, vmax=plotmax, transform=crs, cmap='coolwarm')
    ax.coastlines()
    gl = ax.gridlines(crs=crs, draw_labels=True,
                      linewidth=1, color='gray', alpha=0.5, linestyle='--')
    gl.xlabels_top = False
    gl.ylabels_right = False
    gl.xformatter = LONGITUDE_FORMATTER
    gl.yformatter = LATITUDE_FORMATTER
    gl.xlabel_style = {'size': 10, 'color': 'gray'}
    gl.ylabel_style = {'size': 10, 'color': 'gray'}
    cb = plt.colorbar(orientation='horizontal', shrink=0.8, pad=0.05, extend='both')
    # annotate min/max and var name
    #cb.set_label(label=figinfo['varname']+' - model level '+str(figinfo['lev']), weight='bold', fontsize=18)
    #plt.title(figinfo['comment']+' from '+figinfo['source'])
    plt.title('Analysis increment from '+figinfo['source']+' valid: '+str(figinfo['validtime'])+' IAUFHr='+str(figinfo['IAUhr']))
    plt.annotate('min value: '+str(figinfo['min']),xy=(0.01,0.03),fontsize=12,
              xycoords="figure fraction", horizontalalignment='left')
    plt.annotate('max value: '+str(figinfo['max']),xy=(0.99,0.03),fontsize=12,
              xycoords="figure fraction", horizontalalignment='right')
    plt.annotate(figinfo['varname']+' - model level '+str(figinfo['lev']),xy=(0.5,0.03),fontsize=12,
              xycoords="figure fraction", horizontalalignment='center')
    plt.tight_layout()
    plt.savefig(plotdir+'/'+'gsi_'+figinfo['varname']+'_'+str(figinfo['lev'])+'.png')

def plot_incr(incfilepath, plotvars_in, levs_in, plotdir, plotscale):
    # open netCDF increment file
    incfile = nc.Dataset(incfilepath,'r')

    # if levs_in == [] then get list of levs from file
    if len(levs_in) == 0:
        levs = incfile.variables['lev'][:] 
    else:
        levs = levs_in

    # if plotvars_in == [] then get list of increment vars from file
    if len(plotvars_in) == 0:
        plotvars = []
        for var in incfile.variables.values():
            if len(var.dimensions) > 1:
                plotvars.append(var.name)
    else:
        plotvars = plotvars_in 

    # read lat/lon values from file
    lat = incfile.variables['lat'][:]
    lon = incfile.variables['lon'][:]
    lon[lon>180.] = lon[lon>180.]-360.                                                                                                                                                           
    lon = np.roll(lon,int(len(lon)/2),axis=0)
    lons, lats = np.meshgrid(lon, lat)

    # get time information from increment files if it exists
    try:
        anltimeint = incfile.getncattr('analysis_time')
        anltime = dt.datetime.strptime(str(anltimeint),'%Y%m%d%H')
        IAUhr = int(incfile.getncattr('IAU_hour_from_guess'))
        tdiff = 6-IAUhr
        if tdiff > 0:
            validtime = anltime + dt.timedelta(hours=tdiff)
        elif tdiff < 0:
            validtime = anltime - dt.timedelta(hours=abs(tdiff))
        else:
            validtime = anltime
    except:
        validtime = dt.datetime(2000,1,1)
        anltime = dt.datetime(2000,1,1)
        IAUhr = -9999

    # loop through levels and variables
    for var in plotvars:
        vardata = incfile.variables[var][:]
        figinfo = {
                   'varname':var,
                   'source': incfile.getncattr('source'),
                   'comment': incfile.getncattr('comment'),
                   'plotscale': plotscale,
                   'validtime': validtime,
                   'anltime': anltime,
                   'IAUhr': IAUhr, 
                  }
        for z in levs:
            print('Generating increment plot for var=',var,' lev=', str(int(z)))
            figinfo['lev'] = int(z)
            vardata2d = vardata[int(z)-1,...]
            vardata2d = np.roll(vardata2d,int(len(lon)/2),axis=1)
            figinfo['min'] = np.nanmin(vardata2d)
            figinfo['max'] = np.nanmax(vardata2d)
            # call plotting function 
            gen_2d_plot(vardata2d, lons, lats, figinfo, plotdir)

    print('Increment plot .png graphics saved to: ',plotdir)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(
             description = 'Generate plot of GSI global analysis increment from a netCDF increment file')
    parser.add_argument('incfile', help='path to increment netCDF file', type=str)
    parser.add_argument('-v','--vars', nargs='+', default=[], help='increment variables to plot Ex.: T_inc u_inc v_inc (leave blank for all)')
    parser.add_argument('-z','--levs', nargs='+', default=[], help='increment levels to plot (leave blank for all)')
    parser.add_argument('-p','--plotdir', default='./', help='directory to save figures')
    parser.add_argument('-s','--plotscale', default=1, help='scale factor for plot range (1 is 100%)')
    args = parser.parse_args()

    plot_incr(args.incfile, args.vars, args.levs, args.plotdir, float(args.plotscale))
