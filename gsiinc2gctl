#!/usr/bin/env python
# gsiinc2gctl
# script to generate a GrADS control file
# for a given FV3GFS GSI netCDF increment file
# Cory.R.Martin@noaa.gov
# October 21, 2019
import netCDF4 as nc
import argparse

def gsiinc2gctl(ncfile, ctlfile):
  # open the netCDF file
  ncf = nc.Dataset(ncfile)
  # get dimension information
  xlen = int(len(ncf.dimensions['lon']))
  ylen = int(len(ncf.dimensions['lat']))
  zlen = int(len(ncf.dimensions['lev'])) 
  dx = 360./float(xlen)

  # start writing the ctl file
  ctl = open(ctlfile, 'w')
  if os.path.isabs(ncfile):
    ctl.write('DSET '+ncfile+'\n')
  else:
    ctl.write('DSET ^'+ncfile+'\n')
  ctl.write('DTYPE netcdf\n')
  ctl.write('TITLE gsiinc2gctl '+ncfile.split('/')[-1]+'\n')
  ctl.write('UNDEF -3.e38\n')
  ctl.write('OPTIONS zrev\n')
  ctl.write('XDEF {0:d} LINEAR 0 {1:.3f}\n'.format(xlen, dx))
  # write out latitudes explicitly
  lats = ncf.variables['lat'][:]
  ctl.write('YDEF {0:d} LEVELS\n'.format(ylen))
  i = 0
  j = 0
  while i < ylen:
    if j == 10:
      j = 0
      ctl.write('\n') # newline
    ctl.write(' {0:.3f}'.format(lats[i]))
    i += 1
    j += 1
  ctl.write('\n')
  # zdef
  ctl.write('ZDEF {0:d} LINEAR 1 1\n'.format(zlen))
  # tdef
  ctl.write('TDEF 1 LINEAR 00z21Oct2019 6hr\n')
  # vars
  # first loop through to get number of 2D and 3D vars
  nvars = 0
  for var in ncf.variables.keys():
    if ncf.variables[var].ndim >= 2:
      nvars += 1
  ctl.write('VARS {0:d}\n'.format(nvars))
  # now loop through the vars and write out each line
  for var in ncf.variables.keys():
    if ncf.variables[var].ndim < 2:
      continue
    if ncf.variables[var].ndim == 2:
      dimstr = 'y,x'
      levstr = '1'
    else:
      dimstr = 'z,y,x'
      levstr = '{0:d}'.format(zlen)
    ctl.write(var+'=>'+var+' '+levstr+' '+dimstr+' '+var+' GSI Increment\n')
  ctl.write('ENDVARS\n')
  ctl.close()
  ncf.close()


if __name__ == '__main__':
  parser = argparse.ArgumentParser(
           description = 'This Python-based utility will read a FV3GFS netCDF GSI increment file and produce a GrADS control file')
  parser.add_argument('ncfile', help='path to netCDF file to process', type=str)
  parser.add_argument('ctlfile', help='path to output GrADS control file', type=str)
  args = parser.parse_args()
  gsiinc2gctl(args.ncfile, args.ctlfile)
