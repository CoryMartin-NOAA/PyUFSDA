#!/usr/bin/env python
# getgfsnctime
# cory.r.martin@noaa.gov
# 2019-10-17
# script to return initial and valid time 
# for specified netCDF file
import argparse
import datetime

def get_timeinfo(ncfile):
  """ get_timeinfo(ncfile)
   - function to return datetime objects of initialized time and valid time
   input: ncfile - string to path to netCDF file
   returns: inittime, validtime - datetime objects
            nfhour - integer forecast hour
  """
  import netCDF4 as nc
  import datetime as dt
  from cftime import _parse_date
  ncf = nc.Dataset(ncfile)
  time_units = ncf['time'].units
  date_str = time_units.split('since ')[1]
  initstr = '%04i%02i%02i%02i' % _parse_date(date_str)[0:4]
  inittime = dt.datetime.strptime(initstr,"%Y%m%d%H")
  nfhour = int(ncf['time'][0])
  validtime = inittime + dt.timedelta(hours=nfhour)
  ncf.close()

  return inittime, validtime, nfhour


if __name__ == '__main__':
  parser = argparse.ArgumentParser(
           description='Get initial/valid time information from a FV3GFS netCDF file')
  parser.add_argument('ncfile', help='path to input netCDF file',
                      type=str)
  parser.add_argument('-i','--init', action='store_true', default=False,
                      help='option to print out initialized time YYYYMMDDHHMM')
  parser.add_argument('-v','--valid', action='store_true', default=False,
                      help='option to print out valid time YYYYMMDDHHMM')
  parser.add_argument('-f','--fhour', action='store_true', default=False,
                      help='option to print out forecast hour')
  args = parser.parse_args()
  inittime, validtime, nfhour = get_timeinfo(args.ncfile)
  if args.init:
     print(inittime.strftime("%Y%m%d%H%M"))
  elif args.valid:
     print(validtime.strftime("%Y%m%d%H%M"))
  elif args.fhour:
     print(nfhour)
  else:
     print(args.ncfile)
     print('Initial time: '+inittime.strftime("%Y-%m-%d %H:%M"))
     print('Valid time: '+validtime.strftime("%Y-%m-%d %H:%M"))
     print('Forecast hour: '+str(nfhour))
